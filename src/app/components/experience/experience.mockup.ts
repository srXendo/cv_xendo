export function getExperienceMockup(): any[]{
    const ExperienceMockup = `SYSTEMS MAINTENANCE SERVICES EUROPA, S.A;;27.2.2017;;23.10.2017;;239;;Desarrollo de scripts que acceden, mediante técnicas de web scraping, a APIs externas. Se realiza la recepción de datos en formatos XML, JSON y mediante consultas SQL, los cuales son tratados a través de nuestra API para su posterior almacenamiento y uso.  Estos scripts cuentan con un nivel de automatización que permite verificar si se ha establecido correctamente la conexión con las APIs externas, utilizando un sistema de autenticación basado en tokens. Posteriormente, los datos capturados y procesados (principalmente información empresarial) se integran con nuestros propios datos, para que los clientes que los soliciten puedan visualizarlos y modificarlos en tiempo real desde la APP WEB.  Además, participo en el mantenimiento y desarrollo de nuevas funcionalidades para la API REST principal de Movistar Fusión Empresas, incorporando nuevas validaciones y mejoras en la lógica del sistema, lo cual ha contribuido a una mayor fiabilidad y estabilidad de los datos y servicios proporcionados.  También me encargo del mantenimiento y optimización de bases de datos relacionales SQL.$$Evolufarma;;24.10.2017;;10.10.2019;;717;;Creación y mantenimiento de micro servicios basados en diversas tecnologías como Node.js, AngularJS, Angular 2,3,4,5. Creación de nuevas funcionalidades y mantenimiento de las diversas infraestructuras, como bases de datos relacionales y no relacionales, hostings con WordPress y plugin interno, dashboards. Todo esto distribuido en diversos servidores virtuales dedicados con varias tecnologías como MySQL, Oracle, PostgreSQL, MongoDB, Php y Java.$$LA RUECA ASOCIACION SOCIAL Y CULTURAL;;14.10.2019;;03.04.2020;;173;;Ejercicio DevOps: uso de Docker y Google Cloud, preparando el entorno para funcionar correctamente en distintos entornos de ejecución: producción, preproducción y desarrollo. Todo esto necesario para el despliegue y funcionamiento de una aplicación web compuesta por tres servidores.  Backend: desarrollado en Node.js con Express y base de datos MongoDB, implementando un CRUD conectado a Dialogflow. Gestión de cookies, cifrado de información mediante un sistema personalizado basado en OAuth 2.0, y gestión de WebSockets sobre SSL (WSS).  Front-end 1 (Angular 8): comunicación con el backend mediante servicios a través de los protocolos HTTP y HTTPS, con uso de interfaces, componentes, pipes y gestión de eventos generados por WebSockets desde el backend (o viceversa). Desarrollo de un sistema de chat accesible sin cuenta, que identifica el problema o necesidad del usuario a través del chatbot y redirecciona automáticamente a la sala o recurso más adecuado en función de la conversación, con opción de transferencia a un operador humano si es necesario, contemplando las diferentes casuísticas posibles.  Front-end 2 (Angular 8): también comunicado con el backend mediante distintos servicios e interfaces, con capacidad para añadir, eliminar o modificar elementos. Desarrollo de un sistema de gestión de citas, permitiendo reservar rangos de tiempo para atención a los usuarios del chat del front-end 1. Se implementa un sistema de autenticación seguro, registro únicamente mediante invitación y gestión en vivo del contexto conversacional del usuario en diálogo con Dialogflow, mediante eventos gestionados vía WebSockets.$$BOOBOO RED DE OPTIMIZACION, S.L;;02.06.2020;;30.10.2020;;151;;Full Stack Adoptación interna de la plataforma virtual (pro.booboo.eu). Puesta a punto para integrar diferentes mejoras, correcciones y añadirlo en nuestra infraestructura. Una vez adoptado el proyecto (siendo capaces de iniciarlo en local y programar en este). Empezamos a desarrollar y resolver necesidades: Backend: Node Js, Express y PostgreSQL, creación de un nuevo tipo de rol para los usuarios para mostrarle una pequeña demostración interactiva, de la plataforma. Desarrollo de integración con zoho crm, mejoras en los procesos de desarrollo sobre el tratamiento de errores, mejorando la lectura y la trazabilidad de estos. Agrupación de pdfs para ser imprimido en formato impresora térmica (agrupación página por etiqueta), o para impresión en A4 dividido en 3 posiciones (para la reutilización de hojas adhesivas en formato DIN A4). Api y middleware para creación apikey disponible para integraciones externas y validación de esta api key en middleware para permitir el acceso.  Frontend: Angular 6 y ngrx. Modificación de formulario abstracto generado de manera dinámica para la creación y la modificación de un envío para 1 o varios bultos ( logística). Añadido de filtro para el nuevo tipo de usuario (demostración), También añadido en el menú administrador, la posibilidad de cambiar de rol usuario a rol demostración. Modificación del proceso de autentificación y creación de cookies (ajustándose a las nuevas medidas impuestas por la legislación y configuración del estado y Chrome). $$WALMERIC SOLUCIONES, S.L;;04.01.2021;;25.03.2021;;81;;Desarrollador de webservices. Desarrollo de integraciones api rest: salesforce, comdata, entre otras.  Desarrollo de features para diferentes pagina web, basadas en javascript nativo. Desarrollo de co- municación cross-domain por eventos. (Javascript nativo) Creación de documentación para explicar  los webservices. Creación de entornos de ejecución.$$METRICA CONSULTING, S.L.;;12.04.2021;;13.09.2021;;155;;Creación de aplicaciones web y web view en angular, con componentización, servicios, test e2e y unitarios. en entornos cloud.$$UNISYS TECHNICAL SERVICES, S.L;;17.01.2022;;03.06.2022;;138;;Emprendiendo... creación de la infraestructura. microservicios, angular 8, nodejs, MySQL, evolutivos de la base de datos, API rest, CI-CD, auth 2.0, CMS, git.$$MACE MANAGEMENT SERVICES S.A;;08.08.2022;;07.08.2024;;731;;Desarrollo de una aplicación web tipo dashboard utilizando Angular 18, Node.js con Express y Sequelize, desplegada en Google Cloud. La aplicación era totalmente responsive e incluía un sistema completo de gestión documental, además de visualización de datos en tiempo real mediante gráficos interactivos generados con ApexCharts.  Backend: desarrollado en Node.js con Express y Sequelize como ORM, conectado a una base de datos relacional. Incluía una cola de trabajo para la ejecución asincrónica de tareas, y el uso de procesos programados mediante crons para la automatización de eventos y limpieza de datos. Se implementó lógica de negocio avanzada, control de accesos, sistema de permisos y seguridad mediante middlewares personalizados. Se aplicaron métricas de code coverage en el backend, estableciendo un umbral mínimo obligatorio para asegurar la calidad del código.  Front-end (Angular 18): comunicación con el backend mediante servicios HTTP y consumo de APIs REST. Diseño e implementación de componentes reutilizables, gestión de formularios reactivos, eventos, y visualización dinámica de gráficos con ApexCharts. La interfaz fue desarrollada de forma responsive, adaptándose a distintos dispositivos y resoluciones. Se implementaron pruebas unitarias con control de code coverage, aplicando políticas de cobertura mínima como condición previa para el despliegue.  Desarrollo adicional de una aplicación de escritorio utilizando Electron, con sistema de autoactualización integrado. La aplicación contaba con un sistema de alertas y avisos para usuarios, y permitía a usuarios con permisos publicar nuevas aplicaciones internas. Estas podían ser descargadas y actualizadas automáticamente a través del propio software, asegurando un flujo de distribución seguro y controlado.  El sistema de despliegue automático incluía restricciones para el paso a producción, requiriendo validaciones previas como cumplimiento del code coverage mínimo y aprobación manual según el entorno de destino.`
    const arrExpMock = ExperienceMockup.split('$$').map(row=>{
        const arr_row = row.split(';;')
        //Nombre de empresa	Fecha de inicio	Fecha de fin	Dias totales	Detalles
        const name_business = arr_row[0]
        
        const [day, month, year] = arr_row[1].split('.');
        const date_start =  new Date(+year, +month - 1, +day);
                
        const [dayend, monthend, yearend] = arr_row[2].split('.');
        const date_end =  new Date(+yearend, +monthend - 1, +dayend);
        const descritption = arr_row[4]
        return {
            start_date_experience: date_start,
            end_date_experience: date_end,
            name_experience: name_business,
            description_experience: descritption,
        }
    })

    return arrExpMock
}
